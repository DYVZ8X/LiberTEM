from libertem.analysis.base import Analysis
from .template import TemplateBase


class CodeTemplate(TemplateBase):
    """
    Generate code using template from :class:`TemplateBase` and parameters
    from GUI.

    new code segments can be generated by adding templates in :class:`TemplateBase`
    and combining parameters accordingly.

    code for dataset, dependencies, connection are generated here. Analysis
    specific code are handled in `libertem.analysis.helper`.
    """

    def __init__(self, connection, dataset, compound_analysis, type="notebook"):
        self.conn = connection['connection']
        self.ds = dataset
        self.compound_analysis = compound_analysis
        self.type = type

        self.analysis_helper = {}
        for analysis in self.compound_analysis:

            type = analysis['analysisType']
            params = analysis['parameters']
            cls = Analysis.get_analysis_by_type(type)
            helperCls = cls.get_template_helper()
            helper = helperCls(params)
            self.analysis_helper[type] = helper

    def dataset(self):
        ds_type = self.ds['type']
        ds_params = self.ds['params']
        data = {'type': ds_type, 'params': ds_params}
        return self.code_formatter(self.format_template(self.temp_ds, data))

    def dependency(self):
        """
        dependencies required for generated script.

        Common dependencies are available in :class:`TemplateBase`.
        Any additional dependencies can be added through
        corresponding analysis helper.
        """
        extra_dep = []

        if self.conn['type'].lower() == "tcp":
            extra_dep.extend(self.temp_dep_conn)

        for helper in self.analysis_helper.values():
            analysis_dep = helper.get_dependency()
            if analysis_dep is not None:
                extra_dep.extend(analysis_dep)
        dep = self.temp_dep + extra_dep
        if self.type == 'script':
            dep.append("import logging")
        return self.code_formatter('\n'.join(dep))

    def initial_setup(self):
        if self.type == 'notebook':
            return "%matplotlib nbagg"
        else:
            return "logging.basicConfig(level=logging.WARNING)"

    def connection(self):
        docs = ["# Connection"]
        if self.conn['type'].lower() == "tcp":
            link = "https://libertem.github.io/LiberTEM/usage.html#starting-a-custom-cluster"
            more_info = f"[For more info]({link})"
            docs.append(f"Connecting to dask cluster, {more_info}")
            data = {'conn_url': self.conn['address']}
            ctx = self.format_template(self.temp_conn_tcp(), data)
            docs = '\n'.join(docs)
            return ctx, docs
        elif self.conn['type'].lower() == "local":
            docs.append("This starts a local cluster that is accessible through ctx.")
            docs = '\n'.join(docs)
            ctx = '\n'.join(self.temp_conn_local())
            return ctx, docs
        else:
            raise ValueError("unknown connection type")

    def analysis(self):
        form_analysis = []

        for helper in self.analysis_helper.values():
            form_analysis.append(
                {
                    "plots": list(map(self.code_formatter, helper.get_plot())),
                    "code": self.code_formatter(helper.get_analysis()),
                    "docs": self.code_formatter(helper.get_docs()),
                    "save": self.code_formatter(helper.get_save()),
                    "log": helper.get_log()
                }
            )
        return form_analysis
